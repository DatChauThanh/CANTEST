
CANTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001830  0800510c  0800510c  0000510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800693c  0800693c  0000693c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006960  08006960  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006960  08006960  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006960  08006960  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006960  08006960  00006960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006964  08006964  00006964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006968  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08006974  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08006974  000100a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000460c  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011dc  00000000  00000000  00014684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000520  00000000  00000000  00015860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003bb  00000000  00000000  00015d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015f1c  00000000  00000000  0001613b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005bcf  00000000  00000000  0002c057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e522  00000000  00000000  00031c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001330  00000000  00000000  000b0148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000b1478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800510c <__do_global_dtors_aux>:
 800510c:	b510      	push	{r4, lr}
 800510e:	4c05      	ldr	r4, [pc, #20]	; (8005124 <__do_global_dtors_aux+0x18>)
 8005110:	7823      	ldrb	r3, [r4, #0]
 8005112:	b933      	cbnz	r3, 8005122 <__do_global_dtors_aux+0x16>
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <__do_global_dtors_aux+0x1c>)
 8005116:	b113      	cbz	r3, 800511e <__do_global_dtors_aux+0x12>
 8005118:	4804      	ldr	r0, [pc, #16]	; (800512c <__do_global_dtors_aux+0x20>)
 800511a:	f3af 8000 	nop.w
 800511e:	2301      	movs	r3, #1
 8005120:	7023      	strb	r3, [r4, #0]
 8005122:	bd10      	pop	{r4, pc}
 8005124:	2000000c 	.word	0x2000000c
 8005128:	00000000 	.word	0x00000000
 800512c:	08006924 	.word	0x08006924

08005130 <frame_dummy>:
 8005130:	b508      	push	{r3, lr}
 8005132:	4b03      	ldr	r3, [pc, #12]	; (8005140 <frame_dummy+0x10>)
 8005134:	b11b      	cbz	r3, 800513e <frame_dummy+0xe>
 8005136:	4903      	ldr	r1, [pc, #12]	; (8005144 <frame_dummy+0x14>)
 8005138:	4803      	ldr	r0, [pc, #12]	; (8005148 <frame_dummy+0x18>)
 800513a:	f3af 8000 	nop.w
 800513e:	bd08      	pop	{r3, pc}
 8005140:	00000000 	.word	0x00000000
 8005144:	20000010 	.word	0x20000010
 8005148:	08006924 	.word	0x08006924

0800514c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005150:	f000 fa00 	bl	8005554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005154:	f000 f832 	bl	80051bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005158:	f000 f8d0 	bl	80052fc <MX_GPIO_Init>
  MX_CAN_Init();
 800515c:	f000 f874 	bl	8005248 <MX_CAN_Init>
    /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8005160:	4812      	ldr	r0, [pc, #72]	; (80051ac <main+0x60>)
 8005162:	f000 fc41 	bl	80059e8 <HAL_CAN_Start>

  TxHeader.IDE = CAN_ID_STD;
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <main+0x64>)
 8005168:	2200      	movs	r2, #0
 800516a:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x446;
 800516c:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <main+0x64>)
 800516e:	f240 4246 	movw	r2, #1094	; 0x446
 8005172:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8005174:	4b0e      	ldr	r3, [pc, #56]	; (80051b0 <main+0x64>)
 8005176:	2200      	movs	r2, #0
 8005178:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 2;
 800517a:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <main+0x64>)
 800517c:	2202      	movs	r2, #2
 800517e:	611a      	str	r2, [r3, #16]

  TxData[0] = 0x50;
 8005180:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <main+0x68>)
 8005182:	2250      	movs	r2, #80	; 0x50
 8005184:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0xAA;
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <main+0x68>)
 8005188:	22aa      	movs	r2, #170	; 0xaa
 800518a:	705a      	strb	r2, [r3, #1]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
	  if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800518c:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <main+0x6c>)
 800518e:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <main+0x68>)
 8005190:	4907      	ldr	r1, [pc, #28]	; (80051b0 <main+0x64>)
 8005192:	4806      	ldr	r0, [pc, #24]	; (80051ac <main+0x60>)
 8005194:	f000 fc6c 	bl	8005a70 <HAL_CAN_AddTxMessage>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <main+0x56>
	  {
		 Error_Handler();
 800519e:	f000 f8f9 	bl	8005394 <Error_Handler>
	  }
	  HAL_Delay(3000);
 80051a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80051a6:	f000 fa37 	bl	8005618 <HAL_Delay>
	  if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80051aa:	e7ef      	b.n	800518c <main+0x40>
 80051ac:	20000028 	.word	0x20000028
 80051b0:	20000078 	.word	0x20000078
 80051b4:	20000090 	.word	0x20000090
 80051b8:	20000098 	.word	0x20000098

080051bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b090      	sub	sp, #64	; 0x40
 80051c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051c2:	f107 0318 	add.w	r3, r7, #24
 80051c6:	2228      	movs	r2, #40	; 0x28
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f001 fb7e 	bl	80068cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051d0:	1d3b      	adds	r3, r7, #4
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	605a      	str	r2, [r3, #4]
 80051d8:	609a      	str	r2, [r3, #8]
 80051da:	60da      	str	r2, [r3, #12]
 80051dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80051de:	2301      	movs	r3, #1
 80051e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80051e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80051e8:	2300      	movs	r3, #0
 80051ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051ec:	2301      	movs	r3, #1
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051f0:	2302      	movs	r3, #2
 80051f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80051f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80051fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80051fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005200:	f107 0318 	add.w	r3, r7, #24
 8005204:	4618      	mov	r0, r3
 8005206:	f000 ff83 	bl	8006110 <HAL_RCC_OscConfig>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005210:	f000 f8c0 	bl	8005394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005214:	230f      	movs	r3, #15
 8005216:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005218:	2302      	movs	r3, #2
 800521a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800522a:	1d3b      	adds	r3, r7, #4
 800522c:	2102      	movs	r1, #2
 800522e:	4618      	mov	r0, r3
 8005230:	f001 f9f0 	bl	8006614 <HAL_RCC_ClockConfig>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800523a:	f000 f8ab 	bl	8005394 <Error_Handler>
  }
}
 800523e:	bf00      	nop
 8005240:	3740      	adds	r7, #64	; 0x40
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800524c:	4b28      	ldr	r3, [pc, #160]	; (80052f0 <MX_CAN_Init+0xa8>)
 800524e:	4a29      	ldr	r2, [pc, #164]	; (80052f4 <MX_CAN_Init+0xac>)
 8005250:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8005252:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <MX_CAN_Init+0xa8>)
 8005254:	2204      	movs	r2, #4
 8005256:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8005258:	4b25      	ldr	r3, [pc, #148]	; (80052f0 <MX_CAN_Init+0xa8>)
 800525a:	2200      	movs	r2, #0
 800525c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800525e:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <MX_CAN_Init+0xa8>)
 8005260:	2200      	movs	r2, #0
 8005262:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8005264:	4b22      	ldr	r3, [pc, #136]	; (80052f0 <MX_CAN_Init+0xa8>)
 8005266:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800526a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800526c:	4b20      	ldr	r3, [pc, #128]	; (80052f0 <MX_CAN_Init+0xa8>)
 800526e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005272:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8005274:	4b1e      	ldr	r3, [pc, #120]	; (80052f0 <MX_CAN_Init+0xa8>)
 8005276:	2200      	movs	r2, #0
 8005278:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800527a:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <MX_CAN_Init+0xa8>)
 800527c:	2200      	movs	r2, #0
 800527e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8005280:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <MX_CAN_Init+0xa8>)
 8005282:	2200      	movs	r2, #0
 8005284:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8005286:	4b1a      	ldr	r3, [pc, #104]	; (80052f0 <MX_CAN_Init+0xa8>)
 8005288:	2200      	movs	r2, #0
 800528a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800528c:	4b18      	ldr	r3, [pc, #96]	; (80052f0 <MX_CAN_Init+0xa8>)
 800528e:	2200      	movs	r2, #0
 8005290:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8005292:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <MX_CAN_Init+0xa8>)
 8005294:	2200      	movs	r2, #0
 8005296:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8005298:	4815      	ldr	r0, [pc, #84]	; (80052f0 <MX_CAN_Init+0xa8>)
 800529a:	f000 f9e1 	bl	8005660 <HAL_CAN_Init>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80052a4:	f000 f876 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

   canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80052a8:	4b13      	ldr	r3, [pc, #76]	; (80052f8 <MX_CAN_Init+0xb0>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	621a      	str	r2, [r3, #32]
   canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80052ae:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <MX_CAN_Init+0xb0>)
 80052b0:	2212      	movs	r2, #18
 80052b2:	615a      	str	r2, [r3, #20]
   canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80052b4:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <MX_CAN_Init+0xb0>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	611a      	str	r2, [r3, #16]
   canfilterconfig.FilterIdHigh = 0x000;
 80052ba:	4b0f      	ldr	r3, [pc, #60]	; (80052f8 <MX_CAN_Init+0xb0>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
   canfilterconfig.FilterIdLow = 0;
 80052c0:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <MX_CAN_Init+0xb0>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	605a      	str	r2, [r3, #4]
   canfilterconfig.FilterMaskIdHigh = 0;
 80052c6:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <MX_CAN_Init+0xb0>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	609a      	str	r2, [r3, #8]
   canfilterconfig.FilterMaskIdLow = 0;
 80052cc:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <MX_CAN_Init+0xb0>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	60da      	str	r2, [r3, #12]
   canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80052d2:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <MX_CAN_Init+0xb0>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	619a      	str	r2, [r3, #24]
   canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80052d8:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <MX_CAN_Init+0xb0>)
 80052da:	2201      	movs	r2, #1
 80052dc:	61da      	str	r2, [r3, #28]
   canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <MX_CAN_Init+0xb0>)
 80052e0:	2214      	movs	r2, #20
 80052e2:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80052e4:	4904      	ldr	r1, [pc, #16]	; (80052f8 <MX_CAN_Init+0xb0>)
 80052e6:	4802      	ldr	r0, [pc, #8]	; (80052f0 <MX_CAN_Init+0xa8>)
 80052e8:	f000 fab5 	bl	8005856 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80052ec:	bf00      	nop
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20000028 	.word	0x20000028
 80052f4:	40006400 	.word	0x40006400
 80052f8:	20000050 	.word	0x20000050

080052fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005302:	f107 0310 	add.w	r3, r7, #16
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	605a      	str	r2, [r3, #4]
 800530c:	609a      	str	r2, [r3, #8]
 800530e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005310:	4b1e      	ldr	r3, [pc, #120]	; (800538c <MX_GPIO_Init+0x90>)
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	4a1d      	ldr	r2, [pc, #116]	; (800538c <MX_GPIO_Init+0x90>)
 8005316:	f043 0310 	orr.w	r3, r3, #16
 800531a:	6193      	str	r3, [r2, #24]
 800531c:	4b1b      	ldr	r3, [pc, #108]	; (800538c <MX_GPIO_Init+0x90>)
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005328:	4b18      	ldr	r3, [pc, #96]	; (800538c <MX_GPIO_Init+0x90>)
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	4a17      	ldr	r2, [pc, #92]	; (800538c <MX_GPIO_Init+0x90>)
 800532e:	f043 0320 	orr.w	r3, r3, #32
 8005332:	6193      	str	r3, [r2, #24]
 8005334:	4b15      	ldr	r3, [pc, #84]	; (800538c <MX_GPIO_Init+0x90>)
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005340:	4b12      	ldr	r3, [pc, #72]	; (800538c <MX_GPIO_Init+0x90>)
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	4a11      	ldr	r2, [pc, #68]	; (800538c <MX_GPIO_Init+0x90>)
 8005346:	f043 0304 	orr.w	r3, r3, #4
 800534a:	6193      	str	r3, [r2, #24]
 800534c:	4b0f      	ldr	r3, [pc, #60]	; (800538c <MX_GPIO_Init+0x90>)
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	607b      	str	r3, [r7, #4]
 8005356:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8005358:	2200      	movs	r2, #0
 800535a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800535e:	480c      	ldr	r0, [pc, #48]	; (8005390 <MX_GPIO_Init+0x94>)
 8005360:	f000 febe 	bl	80060e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8005364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800536a:	2301      	movs	r3, #1
 800536c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536e:	2300      	movs	r3, #0
 8005370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005372:	2302      	movs	r3, #2
 8005374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8005376:	f107 0310 	add.w	r3, r7, #16
 800537a:	4619      	mov	r1, r3
 800537c:	4804      	ldr	r0, [pc, #16]	; (8005390 <MX_GPIO_Init+0x94>)
 800537e:	f000 fd2b 	bl	8005dd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005382:	bf00      	nop
 8005384:	3720      	adds	r7, #32
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40021000 	.word	0x40021000
 8005390:	40011000 	.word	0x40011000

08005394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005398:	b672      	cpsid	i
}
 800539a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800539c:	e7fe      	b.n	800539c <Error_Handler+0x8>
	...

080053a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80053a6:	4b15      	ldr	r3, [pc, #84]	; (80053fc <HAL_MspInit+0x5c>)
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	4a14      	ldr	r2, [pc, #80]	; (80053fc <HAL_MspInit+0x5c>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	6193      	str	r3, [r2, #24]
 80053b2:	4b12      	ldr	r3, [pc, #72]	; (80053fc <HAL_MspInit+0x5c>)
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	60bb      	str	r3, [r7, #8]
 80053bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053be:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <HAL_MspInit+0x5c>)
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	4a0e      	ldr	r2, [pc, #56]	; (80053fc <HAL_MspInit+0x5c>)
 80053c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c8:	61d3      	str	r3, [r2, #28]
 80053ca:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <HAL_MspInit+0x5c>)
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d2:	607b      	str	r3, [r7, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80053d6:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <HAL_MspInit+0x60>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	4a04      	ldr	r2, [pc, #16]	; (8005400 <HAL_MspInit+0x60>)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053f2:	bf00      	nop
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr
 80053fc:	40021000 	.word	0x40021000
 8005400:	40010000 	.word	0x40010000

08005404 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800540c:	f107 0310 	add.w	r3, r7, #16
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	605a      	str	r2, [r3, #4]
 8005416:	609a      	str	r2, [r3, #8]
 8005418:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1c      	ldr	r2, [pc, #112]	; (8005490 <HAL_CAN_MspInit+0x8c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d131      	bne.n	8005488 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005424:	4b1b      	ldr	r3, [pc, #108]	; (8005494 <HAL_CAN_MspInit+0x90>)
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	4a1a      	ldr	r2, [pc, #104]	; (8005494 <HAL_CAN_MspInit+0x90>)
 800542a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800542e:	61d3      	str	r3, [r2, #28]
 8005430:	4b18      	ldr	r3, [pc, #96]	; (8005494 <HAL_CAN_MspInit+0x90>)
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800543c:	4b15      	ldr	r3, [pc, #84]	; (8005494 <HAL_CAN_MspInit+0x90>)
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	4a14      	ldr	r2, [pc, #80]	; (8005494 <HAL_CAN_MspInit+0x90>)
 8005442:	f043 0304 	orr.w	r3, r3, #4
 8005446:	6193      	str	r3, [r2, #24]
 8005448:	4b12      	ldr	r3, [pc, #72]	; (8005494 <HAL_CAN_MspInit+0x90>)
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005454:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005458:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545e:	2300      	movs	r3, #0
 8005460:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005462:	f107 0310 	add.w	r3, r7, #16
 8005466:	4619      	mov	r1, r3
 8005468:	480b      	ldr	r0, [pc, #44]	; (8005498 <HAL_CAN_MspInit+0x94>)
 800546a:	f000 fcb5 	bl	8005dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800546e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005474:	2302      	movs	r3, #2
 8005476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005478:	2303      	movs	r3, #3
 800547a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800547c:	f107 0310 	add.w	r3, r7, #16
 8005480:	4619      	mov	r1, r3
 8005482:	4805      	ldr	r0, [pc, #20]	; (8005498 <HAL_CAN_MspInit+0x94>)
 8005484:	f000 fca8 	bl	8005dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8005488:	bf00      	nop
 800548a:	3720      	adds	r7, #32
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40006400 	.word	0x40006400
 8005494:	40021000 	.word	0x40021000
 8005498:	40010800 	.word	0x40010800

0800549c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80054a0:	e7fe      	b.n	80054a0 <NMI_Handler+0x4>

080054a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054a2:	b480      	push	{r7}
 80054a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054a6:	e7fe      	b.n	80054a6 <HardFault_Handler+0x4>

080054a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054ac:	e7fe      	b.n	80054ac <MemManage_Handler+0x4>

080054ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054ae:	b480      	push	{r7}
 80054b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054b2:	e7fe      	b.n	80054b2 <BusFault_Handler+0x4>

080054b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054b8:	e7fe      	b.n	80054b8 <UsageFault_Handler+0x4>

080054ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054ba:	b480      	push	{r7}
 80054bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054be:	bf00      	nop
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr

080054c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054c6:	b480      	push	{r7}
 80054c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054ca:	bf00      	nop
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr

080054d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054d2:	b480      	push	{r7}
 80054d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054d6:	bf00      	nop
 80054d8:	46bd      	mov	sp, r7
 80054da:	bc80      	pop	{r7}
 80054dc:	4770      	bx	lr

080054de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054e2:	f000 f87d 	bl	80055e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054e6:	bf00      	nop
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 80054f0:	4b03      	ldr	r3, [pc, #12]	; (8005500 <SystemInit+0x14>)
 80054f2:	4a04      	ldr	r2, [pc, #16]	; (8005504 <SystemInit+0x18>)
 80054f4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80054f6:	bf00      	nop
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	e000ed00 	.word	0xe000ed00
 8005504:	08005000 	.word	0x08005000

08005508 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005508:	f7ff fff0 	bl	80054ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800550c:	480b      	ldr	r0, [pc, #44]	; (800553c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800550e:	490c      	ldr	r1, [pc, #48]	; (8005540 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005510:	4a0c      	ldr	r2, [pc, #48]	; (8005544 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005514:	e002      	b.n	800551c <LoopCopyDataInit>

08005516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800551a:	3304      	adds	r3, #4

0800551c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800551c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800551e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005520:	d3f9      	bcc.n	8005516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005522:	4a09      	ldr	r2, [pc, #36]	; (8005548 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005524:	4c09      	ldr	r4, [pc, #36]	; (800554c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005528:	e001      	b.n	800552e <LoopFillZerobss>

0800552a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800552a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800552c:	3204      	adds	r2, #4

0800552e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800552e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005530:	d3fb      	bcc.n	800552a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005532:	f001 f9d3 	bl	80068dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005536:	f7ff fe09 	bl	800514c <main>
  bx lr
 800553a:	4770      	bx	lr
  ldr r0, =_sdata
 800553c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005540:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8005544:	08006968 	.word	0x08006968
  ldr r2, =_sbss
 8005548:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800554c:	200000a0 	.word	0x200000a0

08005550 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005550:	e7fe      	b.n	8005550 <ADC1_2_IRQHandler>
	...

08005554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <HAL_Init+0x28>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a07      	ldr	r2, [pc, #28]	; (800557c <HAL_Init+0x28>)
 800555e:	f043 0310 	orr.w	r3, r3, #16
 8005562:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005564:	2003      	movs	r0, #3
 8005566:	f000 fc03 	bl	8005d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800556a:	200f      	movs	r0, #15
 800556c:	f000 f808 	bl	8005580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005570:	f7ff ff16 	bl	80053a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40022000 	.word	0x40022000

08005580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005588:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <HAL_InitTick+0x54>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <HAL_InitTick+0x58>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	4619      	mov	r1, r3
 8005592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005596:	fbb3 f3f1 	udiv	r3, r3, r1
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fc0d 	bl	8005dbe <HAL_SYSTICK_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e00e      	b.n	80055cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b0f      	cmp	r3, #15
 80055b2:	d80a      	bhi.n	80055ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055b4:	2200      	movs	r2, #0
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	f04f 30ff 	mov.w	r0, #4294967295
 80055bc:	f000 fbe3 	bl	8005d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055c0:	4a06      	ldr	r2, [pc, #24]	; (80055dc <HAL_InitTick+0x5c>)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e000      	b.n	80055cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20000000 	.word	0x20000000
 80055d8:	20000008 	.word	0x20000008
 80055dc:	20000004 	.word	0x20000004

080055e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055e4:	4b05      	ldr	r3, [pc, #20]	; (80055fc <HAL_IncTick+0x1c>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	4b05      	ldr	r3, [pc, #20]	; (8005600 <HAL_IncTick+0x20>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4413      	add	r3, r2
 80055f0:	4a03      	ldr	r2, [pc, #12]	; (8005600 <HAL_IncTick+0x20>)
 80055f2:	6013      	str	r3, [r2, #0]
}
 80055f4:	bf00      	nop
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr
 80055fc:	20000008 	.word	0x20000008
 8005600:	2000009c 	.word	0x2000009c

08005604 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
  return uwTick;
 8005608:	4b02      	ldr	r3, [pc, #8]	; (8005614 <HAL_GetTick+0x10>)
 800560a:	681b      	ldr	r3, [r3, #0]
}
 800560c:	4618      	mov	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr
 8005614:	2000009c 	.word	0x2000009c

08005618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005620:	f7ff fff0 	bl	8005604 <HAL_GetTick>
 8005624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d005      	beq.n	800563e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005632:	4b0a      	ldr	r3, [pc, #40]	; (800565c <HAL_Delay+0x44>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800563e:	bf00      	nop
 8005640:	f7ff ffe0 	bl	8005604 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	429a      	cmp	r2, r3
 800564e:	d8f7      	bhi.n	8005640 <HAL_Delay+0x28>
  {
  }
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000008 	.word	0x20000008

08005660 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e0ed      	b.n	800584e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d102      	bne.n	8005684 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff fec0 	bl	8005404 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005694:	f7ff ffb6 	bl	8005604 <HAL_GetTick>
 8005698:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800569a:	e012      	b.n	80056c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800569c:	f7ff ffb2 	bl	8005604 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b0a      	cmp	r3, #10
 80056a8:	d90b      	bls.n	80056c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2205      	movs	r2, #5
 80056ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e0c5      	b.n	800584e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0e5      	beq.n	800569c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0202 	bic.w	r2, r2, #2
 80056de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056e0:	f7ff ff90 	bl	8005604 <HAL_GetTick>
 80056e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80056e6:	e012      	b.n	800570e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80056e8:	f7ff ff8c 	bl	8005604 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b0a      	cmp	r3, #10
 80056f4:	d90b      	bls.n	800570e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2205      	movs	r2, #5
 8005706:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e09f      	b.n	800584e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e5      	bne.n	80056e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	7e1b      	ldrb	r3, [r3, #24]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d108      	bne.n	8005736 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	e007      	b.n	8005746 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005744:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	7e5b      	ldrb	r3, [r3, #25]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d108      	bne.n	8005760 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	e007      	b.n	8005770 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800576e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	7e9b      	ldrb	r3, [r3, #26]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d108      	bne.n	800578a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0220 	orr.w	r2, r2, #32
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	e007      	b.n	800579a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0220 	bic.w	r2, r2, #32
 8005798:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	7edb      	ldrb	r3, [r3, #27]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d108      	bne.n	80057b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0210 	bic.w	r2, r2, #16
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e007      	b.n	80057c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0210 	orr.w	r2, r2, #16
 80057c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	7f1b      	ldrb	r3, [r3, #28]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d108      	bne.n	80057de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0208 	orr.w	r2, r2, #8
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	e007      	b.n	80057ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0208 	bic.w	r2, r2, #8
 80057ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	7f5b      	ldrb	r3, [r3, #29]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d108      	bne.n	8005808 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 0204 	orr.w	r2, r2, #4
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	e007      	b.n	8005818 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0204 	bic.w	r2, r2, #4
 8005816:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	431a      	orrs	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	431a      	orrs	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	ea42 0103 	orr.w	r1, r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	1e5a      	subs	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005856:	b480      	push	{r7}
 8005858:	b087      	sub	sp, #28
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800586c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d003      	beq.n	800587c <HAL_CAN_ConfigFilter+0x26>
 8005874:	7cfb      	ldrb	r3, [r7, #19]
 8005876:	2b02      	cmp	r3, #2
 8005878:	f040 80aa 	bne.w	80059d0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005882:	f043 0201 	orr.w	r2, r3, #1
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	2201      	movs	r2, #1
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	43db      	mvns	r3, r3
 80058a6:	401a      	ands	r2, r3
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d123      	bne.n	80058fe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	43db      	mvns	r3, r3
 80058c0:	401a      	ands	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80058d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	3248      	adds	r2, #72	; 0x48
 80058de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80058f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058f4:	6979      	ldr	r1, [r7, #20]
 80058f6:	3348      	adds	r3, #72	; 0x48
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	440b      	add	r3, r1
 80058fc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d122      	bne.n	800594c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	431a      	orrs	r2, r3
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005926:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	3248      	adds	r2, #72	; 0x48
 800592c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005940:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005942:	6979      	ldr	r1, [r7, #20]
 8005944:	3348      	adds	r3, #72	; 0x48
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	440b      	add	r3, r1
 800594a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d109      	bne.n	8005968 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	43db      	mvns	r3, r3
 800595e:	401a      	ands	r2, r3
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005966:	e007      	b.n	8005978 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	431a      	orrs	r2, r3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d109      	bne.n	8005994 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	43db      	mvns	r3, r3
 800598a:	401a      	ands	r2, r3
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005992:	e007      	b.n	80059a4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	431a      	orrs	r2, r3
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d107      	bne.n	80059bc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	431a      	orrs	r2, r3
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	e006      	b.n	80059de <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
  }
}
 80059de:	4618      	mov	r0, r3
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d12e      	bne.n	8005a5a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a14:	f7ff fdf6 	bl	8005604 <HAL_GetTick>
 8005a18:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005a1a:	e012      	b.n	8005a42 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005a1c:	f7ff fdf2 	bl	8005604 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b0a      	cmp	r3, #10
 8005a28:	d90b      	bls.n	8005a42 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2205      	movs	r2, #5
 8005a3a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e012      	b.n	8005a68 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e5      	bne.n	8005a1c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	e006      	b.n	8005a68 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
  }
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b089      	sub	sp, #36	; 0x24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a84:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005a8e:	7ffb      	ldrb	r3, [r7, #31]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d003      	beq.n	8005a9c <HAL_CAN_AddTxMessage+0x2c>
 8005a94:	7ffb      	ldrb	r3, [r7, #31]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	f040 80ad 	bne.w	8005bf6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d105      	bne.n	8005abc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 8095 	beq.w	8005be6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	0e1b      	lsrs	r3, r3, #24
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	409a      	lsls	r2, r3
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10d      	bne.n	8005af4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005ae2:	68f9      	ldr	r1, [r7, #12]
 8005ae4:	6809      	ldr	r1, [r1, #0]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	3318      	adds	r3, #24
 8005aec:	011b      	lsls	r3, r3, #4
 8005aee:	440b      	add	r3, r1
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	e00f      	b.n	8005b14 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005afe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005b04:	68f9      	ldr	r1, [r7, #12]
 8005b06:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005b08:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	3318      	adds	r3, #24
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	440b      	add	r3, r1
 8005b12:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6819      	ldr	r1, [r3, #0]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	3318      	adds	r3, #24
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	440b      	add	r3, r1
 8005b24:	3304      	adds	r3, #4
 8005b26:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	7d1b      	ldrb	r3, [r3, #20]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d111      	bne.n	8005b54 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	3318      	adds	r3, #24
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	4413      	add	r3, r2
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	6811      	ldr	r1, [r2, #0]
 8005b44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	3318      	adds	r3, #24
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	440b      	add	r3, r1
 8005b50:	3304      	adds	r3, #4
 8005b52:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3307      	adds	r3, #7
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	061a      	lsls	r2, r3, #24
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3306      	adds	r3, #6
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	041b      	lsls	r3, r3, #16
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3305      	adds	r3, #5
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	021b      	lsls	r3, r3, #8
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	3204      	adds	r2, #4
 8005b74:	7812      	ldrb	r2, [r2, #0]
 8005b76:	4610      	mov	r0, r2
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	6811      	ldr	r1, [r2, #0]
 8005b7c:	ea43 0200 	orr.w	r2, r3, r0
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	440b      	add	r3, r1
 8005b86:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005b8a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3303      	adds	r3, #3
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	061a      	lsls	r2, r3, #24
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3302      	adds	r3, #2
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	041b      	lsls	r3, r3, #16
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	021b      	lsls	r3, r3, #8
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	7812      	ldrb	r2, [r2, #0]
 8005bac:	4610      	mov	r0, r2
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	6811      	ldr	r1, [r2, #0]
 8005bb2:	ea43 0200 	orr.w	r2, r3, r0
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	440b      	add	r3, r1
 8005bbc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005bc0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	3318      	adds	r3, #24
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	4413      	add	r3, r2
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	6811      	ldr	r1, [r2, #0]
 8005bd4:	f043 0201 	orr.w	r2, r3, #1
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	3318      	adds	r3, #24
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	440b      	add	r3, r1
 8005be0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e00e      	b.n	8005c04 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e006      	b.n	8005c04 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
  }
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3724      	adds	r7, #36	; 0x24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bc80      	pop	{r7}
 8005c0c:	4770      	bx	lr
	...

08005c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c20:	4b0c      	ldr	r3, [pc, #48]	; (8005c54 <__NVIC_SetPriorityGrouping+0x44>)
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c42:	4a04      	ldr	r2, [pc, #16]	; (8005c54 <__NVIC_SetPriorityGrouping+0x44>)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	60d3      	str	r3, [r2, #12]
}
 8005c48:	bf00      	nop
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bc80      	pop	{r7}
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	e000ed00 	.word	0xe000ed00

08005c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c5c:	4b04      	ldr	r3, [pc, #16]	; (8005c70 <__NVIC_GetPriorityGrouping+0x18>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	0a1b      	lsrs	r3, r3, #8
 8005c62:	f003 0307 	and.w	r3, r3, #7
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bc80      	pop	{r7}
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	e000ed00 	.word	0xe000ed00

08005c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	6039      	str	r1, [r7, #0]
 8005c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	db0a      	blt.n	8005c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	490c      	ldr	r1, [pc, #48]	; (8005cc0 <__NVIC_SetPriority+0x4c>)
 8005c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c92:	0112      	lsls	r2, r2, #4
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	440b      	add	r3, r1
 8005c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c9c:	e00a      	b.n	8005cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	4908      	ldr	r1, [pc, #32]	; (8005cc4 <__NVIC_SetPriority+0x50>)
 8005ca4:	79fb      	ldrb	r3, [r7, #7]
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	3b04      	subs	r3, #4
 8005cac:	0112      	lsls	r2, r2, #4
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	761a      	strb	r2, [r3, #24]
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	e000e100 	.word	0xe000e100
 8005cc4:	e000ed00 	.word	0xe000ed00

08005cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b089      	sub	sp, #36	; 0x24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	f1c3 0307 	rsb	r3, r3, #7
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	bf28      	it	cs
 8005ce6:	2304      	movcs	r3, #4
 8005ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	3304      	adds	r3, #4
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	d902      	bls.n	8005cf8 <NVIC_EncodePriority+0x30>
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	3b03      	subs	r3, #3
 8005cf6:	e000      	b.n	8005cfa <NVIC_EncodePriority+0x32>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	fa02 f303 	lsl.w	r3, r2, r3
 8005d06:	43da      	mvns	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	401a      	ands	r2, r3
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d10:	f04f 31ff 	mov.w	r1, #4294967295
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1a:	43d9      	mvns	r1, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d20:	4313      	orrs	r3, r2
         );
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3724      	adds	r7, #36	; 0x24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bc80      	pop	{r7}
 8005d2a:	4770      	bx	lr

08005d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d3c:	d301      	bcc.n	8005d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e00f      	b.n	8005d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d42:	4a0a      	ldr	r2, [pc, #40]	; (8005d6c <SysTick_Config+0x40>)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d4a:	210f      	movs	r1, #15
 8005d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d50:	f7ff ff90 	bl	8005c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d54:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <SysTick_Config+0x40>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d5a:	4b04      	ldr	r3, [pc, #16]	; (8005d6c <SysTick_Config+0x40>)
 8005d5c:	2207      	movs	r2, #7
 8005d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	e000e010 	.word	0xe000e010

08005d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff ff49 	bl	8005c10 <__NVIC_SetPriorityGrouping>
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b086      	sub	sp, #24
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
 8005d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d98:	f7ff ff5e 	bl	8005c58 <__NVIC_GetPriorityGrouping>
 8005d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	6978      	ldr	r0, [r7, #20]
 8005da4:	f7ff ff90 	bl	8005cc8 <NVIC_EncodePriority>
 8005da8:	4602      	mov	r2, r0
 8005daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dae:	4611      	mov	r1, r2
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff ff5f 	bl	8005c74 <__NVIC_SetPriority>
}
 8005db6:	bf00      	nop
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b082      	sub	sp, #8
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff ffb0 	bl	8005d2c <SysTick_Config>
 8005dcc:	4603      	mov	r3, r0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b08b      	sub	sp, #44	; 0x2c
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005de2:	2300      	movs	r3, #0
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005de6:	2300      	movs	r3, #0
 8005de8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dea:	e169      	b.n	80060c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005dec:	2201      	movs	r2, #1
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	f040 8158 	bne.w	80060ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	4a9a      	ldr	r2, [pc, #616]	; (8006078 <HAL_GPIO_Init+0x2a0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d05e      	beq.n	8005ed2 <HAL_GPIO_Init+0xfa>
 8005e14:	4a98      	ldr	r2, [pc, #608]	; (8006078 <HAL_GPIO_Init+0x2a0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d875      	bhi.n	8005f06 <HAL_GPIO_Init+0x12e>
 8005e1a:	4a98      	ldr	r2, [pc, #608]	; (800607c <HAL_GPIO_Init+0x2a4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d058      	beq.n	8005ed2 <HAL_GPIO_Init+0xfa>
 8005e20:	4a96      	ldr	r2, [pc, #600]	; (800607c <HAL_GPIO_Init+0x2a4>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d86f      	bhi.n	8005f06 <HAL_GPIO_Init+0x12e>
 8005e26:	4a96      	ldr	r2, [pc, #600]	; (8006080 <HAL_GPIO_Init+0x2a8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d052      	beq.n	8005ed2 <HAL_GPIO_Init+0xfa>
 8005e2c:	4a94      	ldr	r2, [pc, #592]	; (8006080 <HAL_GPIO_Init+0x2a8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d869      	bhi.n	8005f06 <HAL_GPIO_Init+0x12e>
 8005e32:	4a94      	ldr	r2, [pc, #592]	; (8006084 <HAL_GPIO_Init+0x2ac>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d04c      	beq.n	8005ed2 <HAL_GPIO_Init+0xfa>
 8005e38:	4a92      	ldr	r2, [pc, #584]	; (8006084 <HAL_GPIO_Init+0x2ac>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d863      	bhi.n	8005f06 <HAL_GPIO_Init+0x12e>
 8005e3e:	4a92      	ldr	r2, [pc, #584]	; (8006088 <HAL_GPIO_Init+0x2b0>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d046      	beq.n	8005ed2 <HAL_GPIO_Init+0xfa>
 8005e44:	4a90      	ldr	r2, [pc, #576]	; (8006088 <HAL_GPIO_Init+0x2b0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d85d      	bhi.n	8005f06 <HAL_GPIO_Init+0x12e>
 8005e4a:	2b12      	cmp	r3, #18
 8005e4c:	d82a      	bhi.n	8005ea4 <HAL_GPIO_Init+0xcc>
 8005e4e:	2b12      	cmp	r3, #18
 8005e50:	d859      	bhi.n	8005f06 <HAL_GPIO_Init+0x12e>
 8005e52:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <HAL_GPIO_Init+0x80>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005ed3 	.word	0x08005ed3
 8005e5c:	08005ead 	.word	0x08005ead
 8005e60:	08005ebf 	.word	0x08005ebf
 8005e64:	08005f01 	.word	0x08005f01
 8005e68:	08005f07 	.word	0x08005f07
 8005e6c:	08005f07 	.word	0x08005f07
 8005e70:	08005f07 	.word	0x08005f07
 8005e74:	08005f07 	.word	0x08005f07
 8005e78:	08005f07 	.word	0x08005f07
 8005e7c:	08005f07 	.word	0x08005f07
 8005e80:	08005f07 	.word	0x08005f07
 8005e84:	08005f07 	.word	0x08005f07
 8005e88:	08005f07 	.word	0x08005f07
 8005e8c:	08005f07 	.word	0x08005f07
 8005e90:	08005f07 	.word	0x08005f07
 8005e94:	08005f07 	.word	0x08005f07
 8005e98:	08005f07 	.word	0x08005f07
 8005e9c:	08005eb5 	.word	0x08005eb5
 8005ea0:	08005ec9 	.word	0x08005ec9
 8005ea4:	4a79      	ldr	r2, [pc, #484]	; (800608c <HAL_GPIO_Init+0x2b4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d013      	beq.n	8005ed2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005eaa:	e02c      	b.n	8005f06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	623b      	str	r3, [r7, #32]
          break;
 8005eb2:	e029      	b.n	8005f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	623b      	str	r3, [r7, #32]
          break;
 8005ebc:	e024      	b.n	8005f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	623b      	str	r3, [r7, #32]
          break;
 8005ec6:	e01f      	b.n	8005f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	623b      	str	r3, [r7, #32]
          break;
 8005ed0:	e01a      	b.n	8005f08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d102      	bne.n	8005ee0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005eda:	2304      	movs	r3, #4
 8005edc:	623b      	str	r3, [r7, #32]
          break;
 8005ede:	e013      	b.n	8005f08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d105      	bne.n	8005ef4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005ee8:	2308      	movs	r3, #8
 8005eea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	611a      	str	r2, [r3, #16]
          break;
 8005ef2:	e009      	b.n	8005f08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005ef4:	2308      	movs	r3, #8
 8005ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	615a      	str	r2, [r3, #20]
          break;
 8005efe:	e003      	b.n	8005f08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005f00:	2300      	movs	r3, #0
 8005f02:	623b      	str	r3, [r7, #32]
          break;
 8005f04:	e000      	b.n	8005f08 <HAL_GPIO_Init+0x130>
          break;
 8005f06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	2bff      	cmp	r3, #255	; 0xff
 8005f0c:	d801      	bhi.n	8005f12 <HAL_GPIO_Init+0x13a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	e001      	b.n	8005f16 <HAL_GPIO_Init+0x13e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3304      	adds	r3, #4
 8005f16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	2bff      	cmp	r3, #255	; 0xff
 8005f1c:	d802      	bhi.n	8005f24 <HAL_GPIO_Init+0x14c>
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	e002      	b.n	8005f2a <HAL_GPIO_Init+0x152>
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	3b08      	subs	r3, #8
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	210f      	movs	r1, #15
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	fa01 f303 	lsl.w	r3, r1, r3
 8005f38:	43db      	mvns	r3, r3
 8005f3a:	401a      	ands	r2, r3
 8005f3c:	6a39      	ldr	r1, [r7, #32]
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	fa01 f303 	lsl.w	r3, r1, r3
 8005f44:	431a      	orrs	r2, r3
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 80b1 	beq.w	80060ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005f58:	4b4d      	ldr	r3, [pc, #308]	; (8006090 <HAL_GPIO_Init+0x2b8>)
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	4a4c      	ldr	r2, [pc, #304]	; (8006090 <HAL_GPIO_Init+0x2b8>)
 8005f5e:	f043 0301 	orr.w	r3, r3, #1
 8005f62:	6193      	str	r3, [r2, #24]
 8005f64:	4b4a      	ldr	r3, [pc, #296]	; (8006090 <HAL_GPIO_Init+0x2b8>)
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	60bb      	str	r3, [r7, #8]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005f70:	4a48      	ldr	r2, [pc, #288]	; (8006094 <HAL_GPIO_Init+0x2bc>)
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	089b      	lsrs	r3, r3, #2
 8005f76:	3302      	adds	r3, #2
 8005f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	f003 0303 	and.w	r3, r3, #3
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	220f      	movs	r2, #15
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	43db      	mvns	r3, r3
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4013      	ands	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a40      	ldr	r2, [pc, #256]	; (8006098 <HAL_GPIO_Init+0x2c0>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d013      	beq.n	8005fc4 <HAL_GPIO_Init+0x1ec>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a3f      	ldr	r2, [pc, #252]	; (800609c <HAL_GPIO_Init+0x2c4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d00d      	beq.n	8005fc0 <HAL_GPIO_Init+0x1e8>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a3e      	ldr	r2, [pc, #248]	; (80060a0 <HAL_GPIO_Init+0x2c8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d007      	beq.n	8005fbc <HAL_GPIO_Init+0x1e4>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a3d      	ldr	r2, [pc, #244]	; (80060a4 <HAL_GPIO_Init+0x2cc>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d101      	bne.n	8005fb8 <HAL_GPIO_Init+0x1e0>
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e006      	b.n	8005fc6 <HAL_GPIO_Init+0x1ee>
 8005fb8:	2304      	movs	r3, #4
 8005fba:	e004      	b.n	8005fc6 <HAL_GPIO_Init+0x1ee>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e002      	b.n	8005fc6 <HAL_GPIO_Init+0x1ee>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <HAL_GPIO_Init+0x1ee>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc8:	f002 0203 	and.w	r2, r2, #3
 8005fcc:	0092      	lsls	r2, r2, #2
 8005fce:	4093      	lsls	r3, r2
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005fd6:	492f      	ldr	r1, [pc, #188]	; (8006094 <HAL_GPIO_Init+0x2bc>)
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	089b      	lsrs	r3, r3, #2
 8005fdc:	3302      	adds	r3, #2
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d006      	beq.n	8005ffe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005ff0:	4b2d      	ldr	r3, [pc, #180]	; (80060a8 <HAL_GPIO_Init+0x2d0>)
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	492c      	ldr	r1, [pc, #176]	; (80060a8 <HAL_GPIO_Init+0x2d0>)
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	608b      	str	r3, [r1, #8]
 8005ffc:	e006      	b.n	800600c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005ffe:	4b2a      	ldr	r3, [pc, #168]	; (80060a8 <HAL_GPIO_Init+0x2d0>)
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	43db      	mvns	r3, r3
 8006006:	4928      	ldr	r1, [pc, #160]	; (80060a8 <HAL_GPIO_Init+0x2d0>)
 8006008:	4013      	ands	r3, r2
 800600a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d006      	beq.n	8006026 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006018:	4b23      	ldr	r3, [pc, #140]	; (80060a8 <HAL_GPIO_Init+0x2d0>)
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	4922      	ldr	r1, [pc, #136]	; (80060a8 <HAL_GPIO_Init+0x2d0>)
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	4313      	orrs	r3, r2
 8006022:	60cb      	str	r3, [r1, #12]
 8006024:	e006      	b.n	8006034 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006026:	4b20      	ldr	r3, [pc, #128]	; (80060a8 <HAL_GPIO_Init+0x2d0>)
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	43db      	mvns	r3, r3
 800602e:	491e      	ldr	r1, [pc, #120]	; (80060a8 <HAL_GPIO_Init+0x2d0>)
 8006030:	4013      	ands	r3, r2
 8006032:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d006      	beq.n	800604e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006040:	4b19      	ldr	r3, [pc, #100]	; (80060a8 <HAL_GPIO_Init+0x2d0>)
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	4918      	ldr	r1, [pc, #96]	; (80060a8 <HAL_GPIO_Init+0x2d0>)
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	4313      	orrs	r3, r2
 800604a:	604b      	str	r3, [r1, #4]
 800604c:	e006      	b.n	800605c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800604e:	4b16      	ldr	r3, [pc, #88]	; (80060a8 <HAL_GPIO_Init+0x2d0>)
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	43db      	mvns	r3, r3
 8006056:	4914      	ldr	r1, [pc, #80]	; (80060a8 <HAL_GPIO_Init+0x2d0>)
 8006058:	4013      	ands	r3, r2
 800605a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d021      	beq.n	80060ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006068:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <HAL_GPIO_Init+0x2d0>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	490e      	ldr	r1, [pc, #56]	; (80060a8 <HAL_GPIO_Init+0x2d0>)
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	4313      	orrs	r3, r2
 8006072:	600b      	str	r3, [r1, #0]
 8006074:	e021      	b.n	80060ba <HAL_GPIO_Init+0x2e2>
 8006076:	bf00      	nop
 8006078:	10320000 	.word	0x10320000
 800607c:	10310000 	.word	0x10310000
 8006080:	10220000 	.word	0x10220000
 8006084:	10210000 	.word	0x10210000
 8006088:	10120000 	.word	0x10120000
 800608c:	10110000 	.word	0x10110000
 8006090:	40021000 	.word	0x40021000
 8006094:	40010000 	.word	0x40010000
 8006098:	40010800 	.word	0x40010800
 800609c:	40010c00 	.word	0x40010c00
 80060a0:	40011000 	.word	0x40011000
 80060a4:	40011400 	.word	0x40011400
 80060a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80060ac:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <HAL_GPIO_Init+0x304>)
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	43db      	mvns	r3, r3
 80060b4:	4909      	ldr	r1, [pc, #36]	; (80060dc <HAL_GPIO_Init+0x304>)
 80060b6:	4013      	ands	r3, r2
 80060b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	3301      	adds	r3, #1
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f47f ae8e 	bne.w	8005dec <HAL_GPIO_Init+0x14>
  }
}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	372c      	adds	r7, #44	; 0x2c
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bc80      	pop	{r7}
 80060da:	4770      	bx	lr
 80060dc:	40010400 	.word	0x40010400

080060e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	807b      	strh	r3, [r7, #2]
 80060ec:	4613      	mov	r3, r2
 80060ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060f0:	787b      	ldrb	r3, [r7, #1]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060f6:	887a      	ldrh	r2, [r7, #2]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80060fc:	e003      	b.n	8006106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80060fe:	887b      	ldrh	r3, [r7, #2]
 8006100:	041a      	lsls	r2, r3, #16
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	611a      	str	r2, [r3, #16]
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	bc80      	pop	{r7}
 800610e:	4770      	bx	lr

08006110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e272      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 8087 	beq.w	800623e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006130:	4b92      	ldr	r3, [pc, #584]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f003 030c 	and.w	r3, r3, #12
 8006138:	2b04      	cmp	r3, #4
 800613a:	d00c      	beq.n	8006156 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800613c:	4b8f      	ldr	r3, [pc, #572]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f003 030c 	and.w	r3, r3, #12
 8006144:	2b08      	cmp	r3, #8
 8006146:	d112      	bne.n	800616e <HAL_RCC_OscConfig+0x5e>
 8006148:	4b8c      	ldr	r3, [pc, #560]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006154:	d10b      	bne.n	800616e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006156:	4b89      	ldr	r3, [pc, #548]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d06c      	beq.n	800623c <HAL_RCC_OscConfig+0x12c>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d168      	bne.n	800623c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e24c      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006176:	d106      	bne.n	8006186 <HAL_RCC_OscConfig+0x76>
 8006178:	4b80      	ldr	r3, [pc, #512]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a7f      	ldr	r2, [pc, #508]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 800617e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	e02e      	b.n	80061e4 <HAL_RCC_OscConfig+0xd4>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10c      	bne.n	80061a8 <HAL_RCC_OscConfig+0x98>
 800618e:	4b7b      	ldr	r3, [pc, #492]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a7a      	ldr	r2, [pc, #488]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	4b78      	ldr	r3, [pc, #480]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a77      	ldr	r2, [pc, #476]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	e01d      	b.n	80061e4 <HAL_RCC_OscConfig+0xd4>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061b0:	d10c      	bne.n	80061cc <HAL_RCC_OscConfig+0xbc>
 80061b2:	4b72      	ldr	r3, [pc, #456]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a71      	ldr	r2, [pc, #452]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	4b6f      	ldr	r3, [pc, #444]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a6e      	ldr	r2, [pc, #440]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	e00b      	b.n	80061e4 <HAL_RCC_OscConfig+0xd4>
 80061cc:	4b6b      	ldr	r3, [pc, #428]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a6a      	ldr	r2, [pc, #424]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	4b68      	ldr	r3, [pc, #416]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a67      	ldr	r2, [pc, #412]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d013      	beq.n	8006214 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ec:	f7ff fa0a 	bl	8005604 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061f4:	f7ff fa06 	bl	8005604 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b64      	cmp	r3, #100	; 0x64
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e200      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006206:	4b5d      	ldr	r3, [pc, #372]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0f0      	beq.n	80061f4 <HAL_RCC_OscConfig+0xe4>
 8006212:	e014      	b.n	800623e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006214:	f7ff f9f6 	bl	8005604 <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800621c:	f7ff f9f2 	bl	8005604 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b64      	cmp	r3, #100	; 0x64
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e1ec      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800622e:	4b53      	ldr	r3, [pc, #332]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <HAL_RCC_OscConfig+0x10c>
 800623a:	e000      	b.n	800623e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800623c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d063      	beq.n	8006312 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800624a:	4b4c      	ldr	r3, [pc, #304]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f003 030c 	and.w	r3, r3, #12
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00b      	beq.n	800626e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006256:	4b49      	ldr	r3, [pc, #292]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f003 030c 	and.w	r3, r3, #12
 800625e:	2b08      	cmp	r3, #8
 8006260:	d11c      	bne.n	800629c <HAL_RCC_OscConfig+0x18c>
 8006262:	4b46      	ldr	r3, [pc, #280]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d116      	bne.n	800629c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800626e:	4b43      	ldr	r3, [pc, #268]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_RCC_OscConfig+0x176>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d001      	beq.n	8006286 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e1c0      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006286:	4b3d      	ldr	r3, [pc, #244]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	4939      	ldr	r1, [pc, #228]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006296:	4313      	orrs	r3, r2
 8006298:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800629a:	e03a      	b.n	8006312 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d020      	beq.n	80062e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062a4:	4b36      	ldr	r3, [pc, #216]	; (8006380 <HAL_RCC_OscConfig+0x270>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062aa:	f7ff f9ab 	bl	8005604 <HAL_GetTick>
 80062ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062b0:	e008      	b.n	80062c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062b2:	f7ff f9a7 	bl	8005604 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d901      	bls.n	80062c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e1a1      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062c4:	4b2d      	ldr	r3, [pc, #180]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0f0      	beq.n	80062b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d0:	4b2a      	ldr	r3, [pc, #168]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	4927      	ldr	r1, [pc, #156]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	600b      	str	r3, [r1, #0]
 80062e4:	e015      	b.n	8006312 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062e6:	4b26      	ldr	r3, [pc, #152]	; (8006380 <HAL_RCC_OscConfig+0x270>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ec:	f7ff f98a 	bl	8005604 <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062f4:	f7ff f986 	bl	8005604 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e180      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006306:	4b1d      	ldr	r3, [pc, #116]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1f0      	bne.n	80062f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d03a      	beq.n	8006394 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d019      	beq.n	800635a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006326:	4b17      	ldr	r3, [pc, #92]	; (8006384 <HAL_RCC_OscConfig+0x274>)
 8006328:	2201      	movs	r2, #1
 800632a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800632c:	f7ff f96a 	bl	8005604 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006334:	f7ff f966 	bl	8005604 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e160      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006346:	4b0d      	ldr	r3, [pc, #52]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0f0      	beq.n	8006334 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006352:	2001      	movs	r0, #1
 8006354:	f000 fa9c 	bl	8006890 <RCC_Delay>
 8006358:	e01c      	b.n	8006394 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800635a:	4b0a      	ldr	r3, [pc, #40]	; (8006384 <HAL_RCC_OscConfig+0x274>)
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006360:	f7ff f950 	bl	8005604 <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006366:	e00f      	b.n	8006388 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006368:	f7ff f94c 	bl	8005604 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d908      	bls.n	8006388 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e146      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
 800637a:	bf00      	nop
 800637c:	40021000 	.word	0x40021000
 8006380:	42420000 	.word	0x42420000
 8006384:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006388:	4b92      	ldr	r3, [pc, #584]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e9      	bne.n	8006368 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 80a6 	beq.w	80064ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063a2:	2300      	movs	r3, #0
 80063a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063a6:	4b8b      	ldr	r3, [pc, #556]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10d      	bne.n	80063ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063b2:	4b88      	ldr	r3, [pc, #544]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	4a87      	ldr	r2, [pc, #540]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80063b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063bc:	61d3      	str	r3, [r2, #28]
 80063be:	4b85      	ldr	r3, [pc, #532]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063c6:	60bb      	str	r3, [r7, #8]
 80063c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063ca:	2301      	movs	r3, #1
 80063cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ce:	4b82      	ldr	r3, [pc, #520]	; (80065d8 <HAL_RCC_OscConfig+0x4c8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d118      	bne.n	800640c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063da:	4b7f      	ldr	r3, [pc, #508]	; (80065d8 <HAL_RCC_OscConfig+0x4c8>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a7e      	ldr	r2, [pc, #504]	; (80065d8 <HAL_RCC_OscConfig+0x4c8>)
 80063e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063e6:	f7ff f90d 	bl	8005604 <HAL_GetTick>
 80063ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ec:	e008      	b.n	8006400 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ee:	f7ff f909 	bl	8005604 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b64      	cmp	r3, #100	; 0x64
 80063fa:	d901      	bls.n	8006400 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e103      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006400:	4b75      	ldr	r3, [pc, #468]	; (80065d8 <HAL_RCC_OscConfig+0x4c8>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006408:	2b00      	cmp	r3, #0
 800640a:	d0f0      	beq.n	80063ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d106      	bne.n	8006422 <HAL_RCC_OscConfig+0x312>
 8006414:	4b6f      	ldr	r3, [pc, #444]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	4a6e      	ldr	r2, [pc, #440]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800641a:	f043 0301 	orr.w	r3, r3, #1
 800641e:	6213      	str	r3, [r2, #32]
 8006420:	e02d      	b.n	800647e <HAL_RCC_OscConfig+0x36e>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10c      	bne.n	8006444 <HAL_RCC_OscConfig+0x334>
 800642a:	4b6a      	ldr	r3, [pc, #424]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	4a69      	ldr	r2, [pc, #420]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006430:	f023 0301 	bic.w	r3, r3, #1
 8006434:	6213      	str	r3, [r2, #32]
 8006436:	4b67      	ldr	r3, [pc, #412]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	4a66      	ldr	r2, [pc, #408]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800643c:	f023 0304 	bic.w	r3, r3, #4
 8006440:	6213      	str	r3, [r2, #32]
 8006442:	e01c      	b.n	800647e <HAL_RCC_OscConfig+0x36e>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	2b05      	cmp	r3, #5
 800644a:	d10c      	bne.n	8006466 <HAL_RCC_OscConfig+0x356>
 800644c:	4b61      	ldr	r3, [pc, #388]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	4a60      	ldr	r2, [pc, #384]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006452:	f043 0304 	orr.w	r3, r3, #4
 8006456:	6213      	str	r3, [r2, #32]
 8006458:	4b5e      	ldr	r3, [pc, #376]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	4a5d      	ldr	r2, [pc, #372]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800645e:	f043 0301 	orr.w	r3, r3, #1
 8006462:	6213      	str	r3, [r2, #32]
 8006464:	e00b      	b.n	800647e <HAL_RCC_OscConfig+0x36e>
 8006466:	4b5b      	ldr	r3, [pc, #364]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	4a5a      	ldr	r2, [pc, #360]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800646c:	f023 0301 	bic.w	r3, r3, #1
 8006470:	6213      	str	r3, [r2, #32]
 8006472:	4b58      	ldr	r3, [pc, #352]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	4a57      	ldr	r2, [pc, #348]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006478:	f023 0304 	bic.w	r3, r3, #4
 800647c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d015      	beq.n	80064b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006486:	f7ff f8bd 	bl	8005604 <HAL_GetTick>
 800648a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800648c:	e00a      	b.n	80064a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800648e:	f7ff f8b9 	bl	8005604 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	f241 3288 	movw	r2, #5000	; 0x1388
 800649c:	4293      	cmp	r3, r2
 800649e:	d901      	bls.n	80064a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e0b1      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a4:	4b4b      	ldr	r3, [pc, #300]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0ee      	beq.n	800648e <HAL_RCC_OscConfig+0x37e>
 80064b0:	e014      	b.n	80064dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064b2:	f7ff f8a7 	bl	8005604 <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064b8:	e00a      	b.n	80064d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ba:	f7ff f8a3 	bl	8005604 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e09b      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064d0:	4b40      	ldr	r3, [pc, #256]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1ee      	bne.n	80064ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d105      	bne.n	80064ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064e2:	4b3c      	ldr	r3, [pc, #240]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	4a3b      	ldr	r2, [pc, #236]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80064e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 8087 	beq.w	8006606 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064f8:	4b36      	ldr	r3, [pc, #216]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f003 030c 	and.w	r3, r3, #12
 8006500:	2b08      	cmp	r3, #8
 8006502:	d061      	beq.n	80065c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	2b02      	cmp	r3, #2
 800650a:	d146      	bne.n	800659a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800650c:	4b33      	ldr	r3, [pc, #204]	; (80065dc <HAL_RCC_OscConfig+0x4cc>)
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006512:	f7ff f877 	bl	8005604 <HAL_GetTick>
 8006516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006518:	e008      	b.n	800652c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800651a:	f7ff f873 	bl	8005604 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e06d      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800652c:	4b29      	ldr	r3, [pc, #164]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1f0      	bne.n	800651a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006540:	d108      	bne.n	8006554 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006542:	4b24      	ldr	r3, [pc, #144]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	4921      	ldr	r1, [pc, #132]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006550:	4313      	orrs	r3, r2
 8006552:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006554:	4b1f      	ldr	r3, [pc, #124]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a19      	ldr	r1, [r3, #32]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	430b      	orrs	r3, r1
 8006566:	491b      	ldr	r1, [pc, #108]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006568:	4313      	orrs	r3, r2
 800656a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800656c:	4b1b      	ldr	r3, [pc, #108]	; (80065dc <HAL_RCC_OscConfig+0x4cc>)
 800656e:	2201      	movs	r2, #1
 8006570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006572:	f7ff f847 	bl	8005604 <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006578:	e008      	b.n	800658c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800657a:	f7ff f843 	bl	8005604 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e03d      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800658c:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0f0      	beq.n	800657a <HAL_RCC_OscConfig+0x46a>
 8006598:	e035      	b.n	8006606 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800659a:	4b10      	ldr	r3, [pc, #64]	; (80065dc <HAL_RCC_OscConfig+0x4cc>)
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a0:	f7ff f830 	bl	8005604 <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a8:	f7ff f82c 	bl	8005604 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e026      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065ba:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1f0      	bne.n	80065a8 <HAL_RCC_OscConfig+0x498>
 80065c6:	e01e      	b.n	8006606 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d107      	bne.n	80065e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e019      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
 80065d4:	40021000 	.word	0x40021000
 80065d8:	40007000 	.word	0x40007000
 80065dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80065e0:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <HAL_RCC_OscConfig+0x500>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d106      	bne.n	8006602 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065fe:	429a      	cmp	r2, r3
 8006600:	d001      	beq.n	8006606 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e000      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	40021000 	.word	0x40021000

08006614 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e0d0      	b.n	80067ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006628:	4b6a      	ldr	r3, [pc, #424]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d910      	bls.n	8006658 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006636:	4b67      	ldr	r3, [pc, #412]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f023 0207 	bic.w	r2, r3, #7
 800663e:	4965      	ldr	r1, [pc, #404]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	4313      	orrs	r3, r2
 8006644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006646:	4b63      	ldr	r3, [pc, #396]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d001      	beq.n	8006658 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e0b8      	b.n	80067ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d020      	beq.n	80066a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006670:	4b59      	ldr	r3, [pc, #356]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	4a58      	ldr	r2, [pc, #352]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006676:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800667a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0308 	and.w	r3, r3, #8
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006688:	4b53      	ldr	r3, [pc, #332]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	4a52      	ldr	r2, [pc, #328]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 800668e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006692:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006694:	4b50      	ldr	r3, [pc, #320]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	494d      	ldr	r1, [pc, #308]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d040      	beq.n	8006734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d107      	bne.n	80066ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ba:	4b47      	ldr	r3, [pc, #284]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d115      	bne.n	80066f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e07f      	b.n	80067ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d107      	bne.n	80066e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066d2:	4b41      	ldr	r3, [pc, #260]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d109      	bne.n	80066f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e073      	b.n	80067ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066e2:	4b3d      	ldr	r3, [pc, #244]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e06b      	b.n	80067ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066f2:	4b39      	ldr	r3, [pc, #228]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f023 0203 	bic.w	r2, r3, #3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	4936      	ldr	r1, [pc, #216]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006700:	4313      	orrs	r3, r2
 8006702:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006704:	f7fe ff7e 	bl	8005604 <HAL_GetTick>
 8006708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800670a:	e00a      	b.n	8006722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800670c:	f7fe ff7a 	bl	8005604 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	f241 3288 	movw	r2, #5000	; 0x1388
 800671a:	4293      	cmp	r3, r2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e053      	b.n	80067ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006722:	4b2d      	ldr	r3, [pc, #180]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f003 020c 	and.w	r2, r3, #12
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	429a      	cmp	r2, r3
 8006732:	d1eb      	bne.n	800670c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006734:	4b27      	ldr	r3, [pc, #156]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	429a      	cmp	r2, r3
 8006740:	d210      	bcs.n	8006764 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006742:	4b24      	ldr	r3, [pc, #144]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f023 0207 	bic.w	r2, r3, #7
 800674a:	4922      	ldr	r1, [pc, #136]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	4313      	orrs	r3, r2
 8006750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006752:	4b20      	ldr	r3, [pc, #128]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	429a      	cmp	r2, r3
 800675e:	d001      	beq.n	8006764 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e032      	b.n	80067ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d008      	beq.n	8006782 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006770:	4b19      	ldr	r3, [pc, #100]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	4916      	ldr	r1, [pc, #88]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 800677e:	4313      	orrs	r3, r2
 8006780:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0308 	and.w	r3, r3, #8
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800678e:	4b12      	ldr	r3, [pc, #72]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	490e      	ldr	r1, [pc, #56]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067a2:	f000 f821 	bl	80067e8 <HAL_RCC_GetSysClockFreq>
 80067a6:	4602      	mov	r2, r0
 80067a8:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	091b      	lsrs	r3, r3, #4
 80067ae:	f003 030f 	and.w	r3, r3, #15
 80067b2:	490a      	ldr	r1, [pc, #40]	; (80067dc <HAL_RCC_ClockConfig+0x1c8>)
 80067b4:	5ccb      	ldrb	r3, [r1, r3]
 80067b6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ba:	4a09      	ldr	r2, [pc, #36]	; (80067e0 <HAL_RCC_ClockConfig+0x1cc>)
 80067bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80067be:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <HAL_RCC_ClockConfig+0x1d0>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe fedc 	bl	8005580 <HAL_InitTick>

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40022000 	.word	0x40022000
 80067d8:	40021000 	.word	0x40021000
 80067dc:	0800693c 	.word	0x0800693c
 80067e0:	20000000 	.word	0x20000000
 80067e4:	20000004 	.word	0x20000004

080067e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	2300      	movs	r3, #0
 80067f4:	60bb      	str	r3, [r7, #8]
 80067f6:	2300      	movs	r3, #0
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	2300      	movs	r3, #0
 80067fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006802:	4b1e      	ldr	r3, [pc, #120]	; (800687c <HAL_RCC_GetSysClockFreq+0x94>)
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f003 030c 	and.w	r3, r3, #12
 800680e:	2b04      	cmp	r3, #4
 8006810:	d002      	beq.n	8006818 <HAL_RCC_GetSysClockFreq+0x30>
 8006812:	2b08      	cmp	r3, #8
 8006814:	d003      	beq.n	800681e <HAL_RCC_GetSysClockFreq+0x36>
 8006816:	e027      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006818:	4b19      	ldr	r3, [pc, #100]	; (8006880 <HAL_RCC_GetSysClockFreq+0x98>)
 800681a:	613b      	str	r3, [r7, #16]
      break;
 800681c:	e027      	b.n	800686e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	0c9b      	lsrs	r3, r3, #18
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	4a17      	ldr	r2, [pc, #92]	; (8006884 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006828:	5cd3      	ldrb	r3, [r2, r3]
 800682a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d010      	beq.n	8006858 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006836:	4b11      	ldr	r3, [pc, #68]	; (800687c <HAL_RCC_GetSysClockFreq+0x94>)
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	0c5b      	lsrs	r3, r3, #17
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	4a11      	ldr	r2, [pc, #68]	; (8006888 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006842:	5cd3      	ldrb	r3, [r2, r3]
 8006844:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a0d      	ldr	r2, [pc, #52]	; (8006880 <HAL_RCC_GetSysClockFreq+0x98>)
 800684a:	fb03 f202 	mul.w	r2, r3, r2
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	fbb2 f3f3 	udiv	r3, r2, r3
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	e004      	b.n	8006862 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a0c      	ldr	r2, [pc, #48]	; (800688c <HAL_RCC_GetSysClockFreq+0xa4>)
 800685c:	fb02 f303 	mul.w	r3, r2, r3
 8006860:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	613b      	str	r3, [r7, #16]
      break;
 8006866:	e002      	b.n	800686e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006868:	4b05      	ldr	r3, [pc, #20]	; (8006880 <HAL_RCC_GetSysClockFreq+0x98>)
 800686a:	613b      	str	r3, [r7, #16]
      break;
 800686c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800686e:	693b      	ldr	r3, [r7, #16]
}
 8006870:	4618      	mov	r0, r3
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	40021000 	.word	0x40021000
 8006880:	007a1200 	.word	0x007a1200
 8006884:	0800694c 	.word	0x0800694c
 8006888:	0800695c 	.word	0x0800695c
 800688c:	003d0900 	.word	0x003d0900

08006890 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006898:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <RCC_Delay+0x34>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a0a      	ldr	r2, [pc, #40]	; (80068c8 <RCC_Delay+0x38>)
 800689e:	fba2 2303 	umull	r2, r3, r2, r3
 80068a2:	0a5b      	lsrs	r3, r3, #9
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	fb02 f303 	mul.w	r3, r2, r3
 80068aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80068ac:	bf00      	nop
  }
  while (Delay --);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	1e5a      	subs	r2, r3, #1
 80068b2:	60fa      	str	r2, [r7, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1f9      	bne.n	80068ac <RCC_Delay+0x1c>
}
 80068b8:	bf00      	nop
 80068ba:	bf00      	nop
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	bc80      	pop	{r7}
 80068c2:	4770      	bx	lr
 80068c4:	20000000 	.word	0x20000000
 80068c8:	10624dd3 	.word	0x10624dd3

080068cc <memset>:
 80068cc:	4603      	mov	r3, r0
 80068ce:	4402      	add	r2, r0
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d100      	bne.n	80068d6 <memset+0xa>
 80068d4:	4770      	bx	lr
 80068d6:	f803 1b01 	strb.w	r1, [r3], #1
 80068da:	e7f9      	b.n	80068d0 <memset+0x4>

080068dc <__libc_init_array>:
 80068dc:	b570      	push	{r4, r5, r6, lr}
 80068de:	2600      	movs	r6, #0
 80068e0:	4d0c      	ldr	r5, [pc, #48]	; (8006914 <__libc_init_array+0x38>)
 80068e2:	4c0d      	ldr	r4, [pc, #52]	; (8006918 <__libc_init_array+0x3c>)
 80068e4:	1b64      	subs	r4, r4, r5
 80068e6:	10a4      	asrs	r4, r4, #2
 80068e8:	42a6      	cmp	r6, r4
 80068ea:	d109      	bne.n	8006900 <__libc_init_array+0x24>
 80068ec:	f000 f81a 	bl	8006924 <_init>
 80068f0:	2600      	movs	r6, #0
 80068f2:	4d0a      	ldr	r5, [pc, #40]	; (800691c <__libc_init_array+0x40>)
 80068f4:	4c0a      	ldr	r4, [pc, #40]	; (8006920 <__libc_init_array+0x44>)
 80068f6:	1b64      	subs	r4, r4, r5
 80068f8:	10a4      	asrs	r4, r4, #2
 80068fa:	42a6      	cmp	r6, r4
 80068fc:	d105      	bne.n	800690a <__libc_init_array+0x2e>
 80068fe:	bd70      	pop	{r4, r5, r6, pc}
 8006900:	f855 3b04 	ldr.w	r3, [r5], #4
 8006904:	4798      	blx	r3
 8006906:	3601      	adds	r6, #1
 8006908:	e7ee      	b.n	80068e8 <__libc_init_array+0xc>
 800690a:	f855 3b04 	ldr.w	r3, [r5], #4
 800690e:	4798      	blx	r3
 8006910:	3601      	adds	r6, #1
 8006912:	e7f2      	b.n	80068fa <__libc_init_array+0x1e>
 8006914:	08006960 	.word	0x08006960
 8006918:	08006960 	.word	0x08006960
 800691c:	08006960 	.word	0x08006960
 8006920:	08006964 	.word	0x08006964

08006924 <_init>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	bf00      	nop
 8006928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800692a:	bc08      	pop	{r3}
 800692c:	469e      	mov	lr, r3
 800692e:	4770      	bx	lr

08006930 <_fini>:
 8006930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006932:	bf00      	nop
 8006934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006936:	bc08      	pop	{r3}
 8006938:	469e      	mov	lr, r3
 800693a:	4770      	bx	lr
